"""
Django settings for portal_nanogene project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-ko@8^pgwg&g+%2pry)8^%q$)smwop$6la^ks^6+%lsz%*3%z77"

# SECURITY WARNING: don't run with debug turned on in production!

DEBUG = False
ALLOWED_HOSTS = [
    'www.nanogene.com.br',
    'nanogene.com.br',
    'www.nanogene.com.br',
    'nanogene.com.br',
    '127.0.0.1',
]

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    'dashboard.apps.DashboardConfig',
    'faq.apps.FaqConfig',
    'pages.apps.PagesConfig',
    'sirna_seeker.apps.SirnaSeekerConfig',
    'user.apps.UserConfig',

    
    'django_celery_results',
    'celery_progress',
]


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "portal_nanogene.urls"

ANC_TEMPLATES = os.path.join(BASE_DIR, 'portal_nanogene', 'templates')
DASHBOARD_TEMPLATES = os.path.join(BASE_DIR, 'dashboard', 'templates')
FAQ_TEMPLATES = os.path.join(BASE_DIR, 'faq', 'templates')
PAGES_TEMPLATES = os.path.join(BASE_DIR, 'pages', 'templates')
SIRNASEEKER_TEMPLATES = os.path.join(BASE_DIR, 'sirna_seeker', 'templates')
USER_TEMPLATES = os.path.join(BASE_DIR, 'user', 'templates')


TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [ANC_TEMPLATES, DASHBOARD_TEMPLATES, SIRNASEEKER_TEMPLATES, USER_TEMPLATES, 
                    PAGES_TEMPLATES, FAQ_TEMPLATES ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "portal_nanogene.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

"""DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}"""

DB_ENGINE   = os.getenv('DB_ENGINE'   , None)
DB_USERNAME = os.getenv('DB_USERNAME' , None)
DB_PASS     = os.getenv('DB_PASS'     , None)
DB_HOST     = os.getenv('DB_HOST'     , None)
DB_PORT     = os.getenv('DB_PORT'     , None)
DB_NAME     = os.getenv('DB_NAME'     , None)

if DB_ENGINE and DB_NAME and DB_USERNAME:
    DATABASES = { 
      'default': {
        'ENGINE'  : 'django.db.backends.' + DB_ENGINE, 
        'NAME'    : DB_NAME,
        'USER'    : DB_USERNAME,
        'PASSWORD': DB_PASS,
        'HOST'    : DB_HOST,
        'PORT'    : DB_PORT,
        }, 
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = '/var/www/portal_nanogene/static_files/'

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)

# Media Files

MEDIA_URL  = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'


SESSION_COOKIE_AGE = 60 * 60 * 24 * 30

# Celery configs
# 

worker_send_task_event= False
task_ignore_result = True
result_backend = 'redis://'

CELERY_BROKER_URL= 'redis://127.0.0.1:6379/0'

CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'

CELERY_RESULT_BACKEND='django-db'
CELERY_TIMEZONE = 'UTC'

CELERY_RESULT_EXTENDED = True

FORKED_BY_MULTIPROCESSING = 1

CELERY_WORKER_CONCURRENCY = 25  
CELERYD_PREFETCH_MULTIPLIER = 5

# email configs
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'host'
EMAIL_USE_TLS = False  # NÃ£o usar TLS, pois estamos usando SSL
EMAIL_USE_SSL = True  # Habilita SSL
EMAIL_PORT = 465  # Porta 465 para SSL
EMAIL_HOST_USER = str(os.getenv("email"))
EMAIL_HOST_PASSWORD = str(os.getenv("senha"))
